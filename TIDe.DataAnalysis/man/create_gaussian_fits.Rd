% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_gaussian_fits.R
\name{create_gaussian_fits}
\alias{create_gaussian_fits}
\title{create_gaussian_fits}
\usage{
create_gaussian_fits(
  arrival_time_data,
  time_window = 1,
  stepsize = 1000,
  meas_name = "",
  activate_Plots = TRUE,
  plot_name = "test",
  fit_guess = c(NA, NA, NA, NA)
)
}
\arguments{
\item{arrival_time_data}{Vector with arrival time data, for example using \code{\link{get_data_arrival_time}}. Should be multiple of \code{stepsize}.}

\item{time_window}{Size of time window, given in ms.}

\item{stepsize}{Number of ions used per fit. Default: 1000}

\item{meas_name}{Measurement name, used in plot titles}

\item{activate_Plots}{if TRUE, plots are created, if FALSE, they are skipped.}

\item{plot_name}{Plot name used for saving plot files in png format.}

\item{fit_guess}{Guessed fit parameters c(Sigma, Mu, A, B). If none are given,
default values based on arithmetic mean and standard deviation are used:
c(Sigma, Mu, A, B) = c(sd(data), mean(data),1,0)}
}
\value{
data.frame with the fit parameters (Sigma, Mu, A, B)
}
\description{
This function creates fits based on the function:
\deqn{f(x) =B + A * exp(-0.5 * [(x-mu) / sigma)^2] / (sigma * sqrt(2))}
It takes a vector filled with arrival times (\code{arrival_time_data}) and divides this vector into subpackets of
a fixed number of ions, given by \code{stepsize}. For each subpacket a gaussian fit is run, and the fit
parameters are saved into a dataframe, which will be given as an output. In addition to this, different
plots will be generated
}
\details{
If the length of \code{arrival_time_data} is not a multiple of the step length \code{stepsize}, the number of steps is
determined by rounding down, resulting in not using the left over part of the end of data. A Warning Message is shown.

The Gaussian fit is created by using stas::nls, a non linear least square estimate.
}
\examples{
 \dontrun{
data <- get_data_arrival_time(i=1,
                             excel_file = "em1p5mm_Data_Analysis.xlsx",
                             excel_sheet_name = "M1",
                             select_last_10000 = TRUE
                             )
result <- create_gaussian_fits(arrival_time_data,
                time_window = 1,
                stepsize = 1000,
                meas_name = "em1mm_M1_Meas8",
                activate_Plots = TRUE,
                plot_name = "em1mm_1200HV_10V_1torr_M1_Meas8",
                fit_guess = c(NA, NA, NA, NA) #No guess given
                )
}
}
